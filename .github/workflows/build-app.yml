# Nome del tuo processo, apparirà nella scheda "Actions" di GitHub
name: Build Orologic per Windows e macOS

# Quando deve partire questo processo?
# In questo caso, su richiesta manuale (workflow_dispatch) o su push a main
on:
  workflow_dispatch:

# Qui definiamo i "lavori" da fare.
jobs:
  # --- PRIMO LAVORO: COMPILAZIONE PER WINDOWS ---
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run PyInstaller
        run: pyinstaller --name Orologic.exe --onefile --add-data "readme.htm;." --add-data "eco.db;." --hidden-import GBUtils orologic.py
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Orologic-Windows
          path: dist/Orologic.exe

  # --- SECONDO LAVORO: COMPILAZIONE PER MACOS ---
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run PyInstaller for Console App
        run: pyinstaller --name Orologic --onefile --hidden-import GBUtils --target-arch universal2 --add-data "readme.htm:." --add-data "eco.db:." orologic.py
      # --- PASSAGGIO 'ditto' RIMOSSO ---
      # Il comando 'ditto' non è necessario perché non stiamo creando un file .app
      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Orologic-macOS-Universal
          # MODIFICATO: Carichiamo direttamente l'eseguibile generato
          path: dist/Orologic